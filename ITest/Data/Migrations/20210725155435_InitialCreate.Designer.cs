// <auto-generated />
using System;
using ITest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITest.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210725155435_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("AnswerChoiceUserQuestionAnswer", b =>
                {
                    b.Property<Guid>("AnswerChoicesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionAnswersId")
                        .HasColumnType("TEXT");

                    b.HasKey("AnswerChoicesId", "QuestionAnswersId");

                    b.HasIndex("QuestionAnswersId");

                    b.ToTable("AnswerChoiceUserQuestionAnswer");
                });

            modelBuilder.Entity("ITest.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ITest.Models.Tests.AnswerChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerString")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerChoices");
                });

            modelBuilder.Entity("ITest.Models.Tests.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionString")
                        .HasColumnType("TEXT");

                    b.Property<byte>("QuestionType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TestId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ITest.Models.Tests.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<uint>("VisitorsCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ITest.Models.Tests.UserQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserTestAnswerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserTestAnswerId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("ITest.Models.Tests.UserTestAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestAnswers");
                });

            modelBuilder.Entity("AnswerChoiceUserQuestionAnswer", b =>
                {
                    b.HasOne("ITest.Models.Tests.AnswerChoice", null)
                        .WithMany()
                        .HasForeignKey("AnswerChoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITest.Models.Tests.UserQuestionAnswer", null)
                        .WithMany()
                        .HasForeignKey("QuestionAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITest.Models.Tests.AnswerChoice", b =>
                {
                    b.HasOne("ITest.Models.Tests.Question", "Question")
                        .WithMany("AnswerChoices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ITest.Models.Tests.Question", b =>
                {
                    b.HasOne("ITest.Models.Tests.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ITest.Models.Tests.Test", b =>
                {
                    b.HasOne("ITest.Models.Accounts.Account", null)
                        .WithMany("Tests")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("ITest.Models.Tests.UserQuestionAnswer", b =>
                {
                    b.HasOne("ITest.Models.Tests.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITest.Models.Tests.UserTestAnswer", null)
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserTestAnswerId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ITest.Models.Tests.UserTestAnswer", b =>
                {
                    b.HasOne("ITest.Models.Tests.Test", "Test")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITest.Models.Accounts.Account", "User")
                        .WithMany("TestAnswers")
                        .HasForeignKey("UserId");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITest.Models.Accounts.Account", b =>
                {
                    b.Navigation("TestAnswers");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ITest.Models.Tests.Question", b =>
                {
                    b.Navigation("AnswerChoices");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("ITest.Models.Tests.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestAnswers");
                });

            modelBuilder.Entity("ITest.Models.Tests.UserTestAnswer", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
